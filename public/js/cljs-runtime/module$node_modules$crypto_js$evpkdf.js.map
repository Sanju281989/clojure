{
"version":3,
"file":"module$node_modules$crypto_js$evpkdf.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,oCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC/F,SAAS,CAACC,IAAD,CAAOC,OAAP,CAAgBC,KAAhB,CAAuB,CACV,QAAvB,GAAI,MAAOH,QAAX,CAECD,MAAOC,CAAAA,OAFR,CAEkBA,OAFlB,CAE4BE,OAAA,CAAQJ,OAAA,CAAQ,oCAAR,CAAR,CAA2BA,OAAA,CAAQ,oCAAR,CAA3B,CAA8CA,OAAA,CAAQ,oCAAR,CAA9C,CAF5B,CAI2B,UAAtB,GAAI,MAAOM,OAAX,EAAoCA,MAAOC,CAAAA,GAA3C,CAEJD,MAAA,CAAO,CAAC,QAAD,CAAW,QAAX,CAAqB,QAArB,CAAP,CAAuCF,OAAvC,CAFI,CAMJA,OAAA,CAAQD,IAAKK,CAAAA,QAAb,CAXgC,CAAhC,CAAA,CAaA,IAbA,CAaM,QAAS,CAACA,QAAD,CAAW,CAE1B,SAAS,EAAG,CAGT,IAAIC,MADID,QACME,CAAAA,GAAd,CACIC,KAAOF,KAAME,CAAAA,IADjB;AAEIC,UAAYH,KAAMG,CAAAA,SAClBC,MAAAA,CAJIL,QAIOM,CAAAA,IAOf,KAAIC,OAASF,KAAOE,CAAAA,MAAhBA,CAAyBJ,IAAKK,CAAAA,MAAL,CAAY,CAQrCC,IAAKN,IAAKK,CAAAA,MAAL,CAAY,CACbE,QAAS,CADI,CAEbC,OAhBEN,KAAOO,CAAAA,GAcI,CAGbC,WAAY,CAHC,CAAZ,CARgC,CAyBrCC,KAAMA,QAAS,CAACL,GAAD,CAAM,CACjB,IAAKA,CAAAA,GAAL,CAAW,IAAKA,CAAAA,GAAID,CAAAA,MAAT,CAAgBC,GAAhB,CADM,CAzBgB,CAyCrCM,QAASA,QAAS,CAACC,QAAD,CAAWC,IAAX,CAAiB,CAC/B,IAGIR,IAAM,IAAKA,CAAAA,GAHf,CAMIE,OAASF,GAAIE,CAAAA,MAAOO,CAAAA,MAAX,EANb,CASIC,WAAaf,SAAUc,CAAAA,MAAV,EATjB,CAYIE,gBAAkBD,UAAWE,CAAAA,KAZjC,CAaIX,QAAUD,GAAIC,CAAAA,OAIlB,KAHIG,GAGJ,CAHiBJ,GAAII,CAAAA,UAGrB,CAAOO,eAAgBE,CAAAA,MAAvB,CAAgCZ,OAAhC,CAAA,CAAyC,CACjCa,KAAJ,EACIZ,MAAOa,CAAAA,MAAP,CAAcD,KAAd,CAEJ,KAAAA,MAAQZ,MAAOa,CAAAA,MAAP,CAAcR,QAAd,CAAwBS,CAAAA,QAAxB,CAAiCR,IAAjC,CACRN,OAAOe,CAAAA,KAAP,EAGA,KAAK,IAAIC;AAAI,CAAb,CAAgBA,CAAhB,CAAoBd,GAApB,CAAgCc,CAAA,EAAhC,CACIJ,KACA,CADQZ,MAAOc,CAAAA,QAAP,CAAgBF,KAAhB,CACR,CAAAZ,MAAOe,CAAAA,KAAP,EAGJP,WAAWS,CAAAA,MAAX,CAAkBL,KAAlB,CAbqC,CAezCJ,UAAWU,CAAAA,QAAX,CAAgC,CAAhC,CAAsBnB,OAEtB,OAAOS,WAnCwB,CAzCE,CAAZ,CAXrBnB,SA4GNO,CAAAA,MAAF,CAAWuB,QAAS,CAACd,QAAD,CAAWC,IAAX,CAAiBR,GAAjB,CAAsB,CACtC,MAAOF,OAAOW,CAAAA,MAAP,CAAcT,GAAd,CAAmBM,CAAAA,OAAnB,CAA2BC,QAA3B,CAAqCC,IAArC,CAD+B,CA9GjC,CAAZ,CAAA,EAoHD,OAAOjB,SAASO,CAAAA,MAtHW,CAb1B,CAD+F;",
"sources":["node_modules/crypto-js/evpkdf.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$crypto_js$evpkdf\"] = function(global,require,module,exports) {\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var MD5 = C_algo.MD5;\n\n\t    /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: MD5,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            var block;\n\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init hasher\n\t            var hasher = cfg.hasher.create();\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                if (block) {\n\t                    hasher.update(block);\n\t                }\n\t                block = hasher.update(password).finalize(salt);\n\t                hasher.reset();\n\n\t                // Iterations\n\t                for (var i = 1; i < iterations; i++) {\n\t                    block = hasher.finalize(block);\n\t                    hasher.reset();\n\t                }\n\n\t                derivedKey.concat(block);\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.EvpKDF = function (password, salt, cfg) {\n\t        return EvpKDF.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.EvpKDF;\n\n}));\n};"],
"names":["shadow$provide","global","require","module","exports","root","factory","undef","define","amd","CryptoJS","C_lib","lib","Base","WordArray","C_algo","algo","EvpKDF","extend","cfg","keySize","hasher","MD5","iterations","init","compute","password","salt","create","derivedKey","derivedKeyWords","words","length","block","update","finalize","reset","i","concat","sigBytes","C.EvpKDF"]
}
