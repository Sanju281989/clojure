{
"version":3,
"file":"module$node_modules$crypto_js$lib_typedarrays.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,6CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACxG,SAAS,CAACC,IAAD,CAAOC,OAAP,CAAgB,CACH,QAAvB,GAAI,MAAOF,QAAX,CAECD,MAAOC,CAAAA,OAFR,CAEkBA,OAFlB,CAE4BE,OAAA,CAAQJ,OAAA,CAAQ,oCAAR,CAAR,CAF5B,CAI2B,UAAtB,GAAI,MAAOK,OAAX,EAAoCA,MAAOC,CAAAA,GAA3C,CAEJD,MAAA,CAAO,CAAC,QAAD,CAAP,CAAmBD,OAAnB,CAFI,CAMJA,OAAA,CAAQD,IAAKI,CAAAA,QAAb,CAXyB,CAAzB,CAAA,CAaA,IAbA,CAaM,QAAS,CAACA,QAAD,CAAW,CAE1B,SAAS,EAAG,CAET,GAA0B,UAA1B,EAAI,MAAOC,YAAX,CAAA,CAOA,IAAIC,UAFIF,QACMG,CAAAA,GACQD,CAAAA,SAAtB,CAGIE,UAAYF,SAAUG,CAAAA,IA0ClBC,EAvCMJ,SAAUG,CAAAA,IAuChBC,CAvCuBC,QAAS,CAACC,UAAD,CAAa,CAE7CA,UAAJ;AAA0BP,WAA1B,GACIO,UADJ,CACiB,IAAIC,UAAJ,CAAeD,UAAf,CADjB,CAKA,IACIA,UADJ,WAC0BE,UAD1B,EAEkC,WAFlC,GAEK,MAAOC,kBAFZ,EAEiDH,UAFjD,WAEuEG,kBAFvE,EAGIH,UAHJ,WAG0BI,WAH1B,EAIIJ,UAJJ,WAI0BK,YAJ1B,EAKIL,UALJ,WAK0BM,WAL1B,EAMIN,UANJ,WAM0BO,YAN1B,EAOIP,UAPJ,WAO0BQ,aAP1B,EAQIR,UARJ,WAQ0BS,aAR1B,CAUIT,UAAA,CAAa,IAAIC,UAAJ,CAAeD,UAAWU,CAAAA,MAA1B,CAAkCV,UAAWW,CAAAA,UAA7C,CAAyDX,UAAWY,CAAAA,UAApE,CAIjB,IAAIZ,UAAJ,WAA0BC,WAA1B,CAAsC,CAMlC,IAJA,IAAIY;AAAuBb,UAAWY,CAAAA,UAAtC,CAGIE,MAAQ,EAHZ,CAISC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBF,oBAApB,CAA0CE,CAAA,EAA1C,CACID,KAAA,CAAMC,CAAN,GAAY,CAAZ,CAAA,EAAkBf,UAAA,CAAWe,CAAX,CAAlB,EAAoC,EAApC,CAA0CA,CAA1C,CAA8C,CAA9C,CAAmD,CAIvDnB,UAAUoB,CAAAA,IAAV,CAAe,IAAf,CAAqBF,KAArB,CAA4BD,oBAA5B,CAXkC,CAAtC,IAcIjB,UAAUqB,CAAAA,KAAV,CAAgB,IAAhB,CAAsBC,SAAtB,CAnC6C,CAuC7CpB,EAAAA,SAAR,CAAoBJ,SApDpB,CAFS,CAAZ,CAAA,EA0DD,OAAOF,SAASG,CAAAA,GAAID,CAAAA,SA5DO,CAb1B,CADwG;",
"sources":["node_modules/crypto-js/lib-typedarrays.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$crypto_js$lib_typedarrays\"] = function(global,require,module,exports) {\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Check if typed arrays are supported\n\t    if (typeof ArrayBuffer != 'function') {\n\t        return;\n\t    }\n\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\n\t    // Reference original init\n\t    var superInit = WordArray.init;\n\n\t    // Augment WordArray.init to handle typed arrays\n\t    var subInit = WordArray.init = function (typedArray) {\n\t        // Convert buffers to uint8\n\t        if (typedArray instanceof ArrayBuffer) {\n\t            typedArray = new Uint8Array(typedArray);\n\t        }\n\n\t        // Convert other array views to uint8\n\t        if (\n\t            typedArray instanceof Int8Array ||\n\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||\n\t            typedArray instanceof Int16Array ||\n\t            typedArray instanceof Uint16Array ||\n\t            typedArray instanceof Int32Array ||\n\t            typedArray instanceof Uint32Array ||\n\t            typedArray instanceof Float32Array ||\n\t            typedArray instanceof Float64Array\n\t        ) {\n\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n\t        }\n\n\t        // Handle Uint8Array\n\t        if (typedArray instanceof Uint8Array) {\n\t            // Shortcut\n\t            var typedArrayByteLength = typedArray.byteLength;\n\n\t            // Extract bytes\n\t            var words = [];\n\t            for (var i = 0; i < typedArrayByteLength; i++) {\n\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n\t            }\n\n\t            // Initialize this word array\n\t            superInit.call(this, words, typedArrayByteLength);\n\t        } else {\n\t            // Else call normal init\n\t            superInit.apply(this, arguments);\n\t        }\n\t    };\n\n\t    subInit.prototype = WordArray;\n\t}());\n\n\n\treturn CryptoJS.lib.WordArray;\n\n}));\n};"],
"names":["shadow$provide","global","require","module","exports","root","factory","define","amd","CryptoJS","ArrayBuffer","WordArray","lib","superInit","init","prototype","WordArray.init","typedArray","Uint8Array","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","buffer","byteOffset","byteLength","typedArrayByteLength","words","i","call","apply","arguments"]
}
