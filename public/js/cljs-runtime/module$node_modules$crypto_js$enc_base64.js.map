{
"version":3,
"file":"module$node_modules$crypto_js$enc_base64.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/crypto-js/enc-base64.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$crypto_js$enc_base64\"] = function(global,require,module,exports) {\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              var bitsCombined = bits1 | bits2;\n\t              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));\n};"],
"names":["shadow$provide","global","require","module","exports","root","factory","define","amd","CryptoJS","WordArray","lib","enc","Base64","stringify","wordArray","words","sigBytes","map","_map","clamp","base64Chars","i","triplet","j","push","charAt","paddingChar","length","join","parse","base64Str","base64StrLength","reverseMap","_reverseMap","charCodeAt","paddingIndex","indexOf","nBytes","bits1","bits2","create"]
}
