{
"version":3,
"file":"module$node_modules$crypto_js$pbkdf2.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/crypto-js/pbkdf2.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$crypto_js$pbkdf2\"] = function(global,require,module,exports) {\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA1 = C_algo.SHA1;\n\t    var HMAC = C_algo.HMAC;\n\n\t    /**\n\t     * Password-Based Key Derivation Function 2 algorithm.\n\t     */\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA1\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: SHA1,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Computes the Password-Based Key Derivation Function 2.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init HMAC\n\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var blockIndexWords = blockIndex.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                var block = hmac.update(salt).finalize(blockIndex);\n\t                hmac.reset();\n\n\t                // Shortcuts\n\t                var blockWords = block.words;\n\t                var blockWordsLength = blockWords.length;\n\n\t                // Iterations\n\t                var intermediate = block;\n\t                for (var i = 1; i < iterations; i++) {\n\t                    intermediate = hmac.finalize(intermediate);\n\t                    hmac.reset();\n\n\t                    // Shortcut\n\t                    var intermediateWords = intermediate.words;\n\n\t                    // XOR intermediate with block\n\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t                        blockWords[j] ^= intermediateWords[j];\n\t                    }\n\t                }\n\n\t                derivedKey.concat(block);\n\t                blockIndexWords[0]++;\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Computes the Password-Based Key Derivation Function 2.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.PBKDF2 = function (password, salt, cfg) {\n\t        return PBKDF2.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.PBKDF2;\n\n}));\n};"],
"names":["shadow$provide","global","require","module","exports","root","factory","undef","define","amd","CryptoJS","C_lib","lib","Base","WordArray","C_algo","algo","HMAC","PBKDF2","extend","cfg","keySize","hasher","SHA1","iterations","init","compute","password","salt","hmac","create","derivedKey","blockIndex","derivedKeyWords","words","blockIndexWords","length","block","update","finalize","reset","blockWords","blockWordsLength","intermediate","i","intermediateWords","j","concat","sigBytes","C.PBKDF2"]
}
