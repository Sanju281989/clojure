{
"version":3,
"file":"module$node_modules$crypto_js$mode_ecb.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,sCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACjG,SAAS,CAACC,IAAD,CAAOC,OAAP,CAAgBC,KAAhB,CAAuB,CACV,QAAvB,GAAI,MAAOH,QAAX,CAECD,MAAOC,CAAAA,OAFR,CAEkBA,OAFlB,CAE4BE,OAAA,CAAQJ,OAAA,CAAQ,oCAAR,CAAR,CAA2BA,OAAA,CAAQ,2CAAR,CAA3B,CAF5B,CAI2B,UAAtB,GAAI,MAAOM,OAAX,EAAoCA,MAAOC,CAAAA,GAA3C,CAEJD,MAAA,CAAO,CAAC,QAAD,CAAW,eAAX,CAAP,CAAoCF,OAApC,CAFI,CAMJA,OAAA,CAAQD,IAAKK,CAAAA,QAAb,CAXgC,CAAhC,CAAA,CAaA,IAbA,CAaM,QAAS,CAACA,QAAD,CAAW,CAK3BA,QAASC,CAAAA,IAAKC,CAAAA,GAAd,CAAqB,QAAS,EAAG,CAC7B,IAAIA,IAAMF,QAASG,CAAAA,GAAIC,CAAAA,eAAgBC,CAAAA,MAA7B,EAEVH,IAAII,CAAAA,SAAJ;AAAgBJ,GAAIG,CAAAA,MAAJ,CAAW,CACvBE,aAAcA,QAAS,CAACC,KAAD,CAAQC,MAAR,CAAgB,CACnC,IAAKC,CAAAA,OAAQC,CAAAA,YAAb,CAA0BH,KAA1B,CAAiCC,MAAjC,CADmC,CADhB,CAAX,CAMhBP,IAAIU,CAAAA,SAAJ,CAAgBV,GAAIG,CAAAA,MAAJ,CAAW,CACvBE,aAAcA,QAAS,CAACC,KAAD,CAAQC,MAAR,CAAgB,CACnC,IAAKC,CAAAA,OAAQG,CAAAA,YAAb,CAA0BL,KAA1B,CAAiCC,MAAjC,CADmC,CADhB,CAAX,CAMhB,OAAOP,IAfsB,CAAZ,EAmBrB,OAAOF,SAASC,CAAAA,IAAKC,CAAAA,GAxBM,CAb1B,CADiG;",
"sources":["node_modules/crypto-js/mode-ecb.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$crypto_js$mode_ecb\"] = function(global,require,module,exports) {\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Electronic Codebook block mode.\n\t */\n\tCryptoJS.mode.ECB = (function () {\n\t    var ECB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    ECB.Encryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.encryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    ECB.Decryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.decryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    return ECB;\n\t}());\n\n\n\treturn CryptoJS.mode.ECB;\n\n}));\n};"],
"names":["shadow$provide","global","require","module","exports","root","factory","undef","define","amd","CryptoJS","mode","ECB","lib","BlockCipherMode","extend","Encryptor","processBlock","words","offset","_cipher","encryptBlock","Decryptor","decryptBlock"]
}
