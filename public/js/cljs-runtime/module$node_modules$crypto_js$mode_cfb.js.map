{
"version":3,
"file":"module$node_modules$crypto_js$mode_cfb.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,sCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACjG,SAAS,CAACC,IAAD,CAAOC,OAAP,CAAgBC,KAAhB,CAAuB,CACV,QAAvB,GAAI,MAAOH,QAAX,CAECD,MAAOC,CAAAA,OAFR,CAEkBA,OAFlB,CAE4BE,OAAA,CAAQJ,OAAA,CAAQ,oCAAR,CAAR,CAA2BA,OAAA,CAAQ,2CAAR,CAA3B,CAF5B,CAI2B,UAAtB,GAAI,MAAOM,OAAX,EAAoCA,MAAOC,CAAAA,GAA3C,CAEJD,MAAA,CAAO,CAAC,QAAD,CAAW,eAAX,CAAP,CAAoCF,OAApC,CAFI,CAMJA,OAAA,CAAQD,IAAKK,CAAAA,QAAb,CAXgC,CAAhC,CAAA,CAaA,IAbA,CAaM,QAAS,CAACA,QAAD,CAAW,CAK3BA,QAASC,CAAAA,IAAKC,CAAAA,GAAd,CAAqB,QAAS,EAAG,CAgC7BC,QAASA,4BAA2B,CAACC,KAAD,CAAQC,MAAR,CAAgBC,SAAhB;AAA2BC,MAA3B,CAAmC,CACnE,IAAIC,SAMJ,EAHIC,SAGJ,CAHS,IAAKC,CAAAA,GAGd,GACIF,SAGA,CAHYC,SAAGE,CAAAA,KAAH,CAAS,CAAT,CAGZ,CAAA,IAAKD,CAAAA,GAAL,CAAWE,IAAAA,EAJf,EAMIJ,SANJ,CAMgB,IAAKK,CAAAA,UAErBN,OAAOO,CAAAA,YAAP,CAAoBN,SAApB,CAA+B,CAA/B,CAGA,KAASO,MAAT,CAAa,CAAb,CAAgBA,MAAhB,CAAoBT,SAApB,CAA+BS,MAAA,EAA/B,CACIX,KAAA,CAAMC,MAAN,CAAeU,MAAf,CAAA,EAAqBP,SAAA,CAAUO,MAAV,CAnB0C,CA/BvE,IAAIb,IAAMF,QAASgB,CAAAA,GAAIC,CAAAA,eAAgBC,CAAAA,MAA7B,EAEVhB,IAAIiB,CAAAA,SAAJ,CAAgBjB,GAAIgB,CAAAA,MAAJ,CAAW,CACvBE,aAAcA,QAAS,CAAChB,KAAD,CAAQC,MAAR,CAAgB,CAEnC,IAAIE,OAAS,IAAKc,CAAAA,OAAlB,CACIf,UAAYC,MAAOD,CAAAA,SAEvBH,4BAA4BmB,CAAAA,IAA5B,CAAiC,IAAjC,CAAuClB,KAAvC,CAA8CC,MAA9C,CAAsDC,SAAtD,CAAiEC,MAAjE,CAGA,KAAKM,CAAAA,UAAL,CAAkBT,KAAMO,CAAAA,KAAN,CAAYN,MAAZ,CAAoBA,MAApB,CAA6BC,SAA7B,CARiB,CADhB,CAAX,CAahBJ;GAAIqB,CAAAA,SAAJ,CAAgBrB,GAAIgB,CAAAA,MAAJ,CAAW,CACvBE,aAAcA,QAAS,CAAChB,KAAD,CAAQC,MAAR,CAAgB,CAEnC,IAAIE,OAAS,IAAKc,CAAAA,OAAlB,CACIf,UAAYC,MAAOD,CAAAA,SADvB,CAIIkB,UAAYpB,KAAMO,CAAAA,KAAN,CAAYN,MAAZ,CAAoBA,MAApB,CAA6BC,SAA7B,CAEhBH,4BAA4BmB,CAAAA,IAA5B,CAAiC,IAAjC,CAAuClB,KAAvC,CAA8CC,MAA9C,CAAsDC,SAAtD,CAAiEC,MAAjE,CAGA,KAAKM,CAAAA,UAAL,CAAkBW,SAXiB,CADhB,CAAX,CAuChB,OAAOtB,IAvDsB,CAAZ,EA2DrB,OAAOF,SAASC,CAAAA,IAAKC,CAAAA,GAhEM,CAb1B,CADiG;",
"sources":["node_modules/crypto-js/mode-cfb.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$crypto_js$mode_cfb\"] = function(global,require,module,exports) {\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher Feedback block mode.\n\t */\n\tCryptoJS.mode.CFB = (function () {\n\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    CFB.Encryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // Remember this block to use with next block\n\t            this._prevBlock = words.slice(offset, offset + blockSize);\n\t        }\n\t    });\n\n\t    CFB.Decryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            // Remember this block to use with next block\n\t            var thisBlock = words.slice(offset, offset + blockSize);\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // This block becomes the previous block\n\t            this._prevBlock = thisBlock;\n\t        }\n\t    });\n\n\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n\t        var keystream;\n\n\t        // Shortcut\n\t        var iv = this._iv;\n\n\t        // Generate keystream\n\t        if (iv) {\n\t            keystream = iv.slice(0);\n\n\t            // Remove IV for subsequent blocks\n\t            this._iv = undefined;\n\t        } else {\n\t            keystream = this._prevBlock;\n\t        }\n\t        cipher.encryptBlock(keystream, 0);\n\n\t        // Encrypt\n\t        for (var i = 0; i < blockSize; i++) {\n\t            words[offset + i] ^= keystream[i];\n\t        }\n\t    }\n\n\t    return CFB;\n\t}());\n\n\n\treturn CryptoJS.mode.CFB;\n\n}));\n};"],
"names":["shadow$provide","global","require","module","exports","root","factory","undef","define","amd","CryptoJS","mode","CFB","generateKeystreamAndEncrypt","words","offset","blockSize","cipher","keystream","iv","_iv","slice","undefined","_prevBlock","encryptBlock","i","lib","BlockCipherMode","extend","Encryptor","processBlock","_cipher","call","Decryptor","thisBlock"]
}
