{
"version":3,
"file":"module$node_modules$crypto_js$mode_ctr_gladman.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,8CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACzG,SAAS,CAACC,IAAD,CAAOC,OAAP,CAAgBC,KAAhB,CAAuB,CACV,QAAvB,GAAI,MAAOH,QAAX,CAECD,MAAOC,CAAAA,OAFR,CAEkBA,OAFlB,CAE4BE,OAAA,CAAQJ,OAAA,CAAQ,oCAAR,CAAR,CAA2BA,OAAA,CAAQ,2CAAR,CAA3B,CAF5B,CAI2B,UAAtB,GAAI,MAAOM,OAAX,EAAoCA,MAAOC,CAAAA,GAA3C,CAEJD,MAAA,CAAO,CAAC,QAAD,CAAW,eAAX,CAAP,CAAoCF,OAApC,CAFI,CAMJA,OAAA,CAAQD,IAAKK,CAAAA,QAAb,CAXgC,CAAhC,CAAA,CAaA,IAbA,CAaM,QAAS,CAACA,QAAD,CAAW,CAO3BA,QAASC,CAAAA,IAAKC,CAAAA,UAAd,CAA4B,QAAS,EAAG,CAGvCC,QAASA,QAAO,CAACC,IAAD,CAChB,CACC,GAA8B,GAA9B,IAAMA,IAAN,EAAc,EAAd,CAAoB,GAApB,EAAoC,CACpC,IAAIC;AAAMD,IAANC,EAAc,EAAdA,CAAkB,GAAtB,CACIC,GAAMF,IAANE,EAAc,CAAdA,CAAiB,GACZF,KAALG,EAAY,GAEL,IAAX,GAAIF,EAAJ,EAEAA,EACA,CADK,CACL,CAAW,GAAX,GAAIC,EAAJ,EAECA,EACA,CADK,CACL,CAAW,GAAX,GAAIC,IAAJ,CAECA,IAFD,CAEM,CAFN,CAMC,EAAEA,IATJ,EAcC,EAAED,EAjBH,EAsBA,EAAED,EAMFD,KAAA,EAFSC,EAET,EAFeD,EAEf,GADSE,EACT,EADe,CACf,EAAQC,IAjC4B,CAApC,IAqCAH,KAAA,EAAS,QAET,OAAOA,KAxCR,CAHG,IAAIF,WAAaF,QAASQ,CAAAA,GAAIC,CAAAA,eAAgBC,CAAAA,MAA7B,EAAjB,CAwDIC,UAAYT,UAAWS,CAAAA,SAAvBA,CAAmCT,UAAWQ,CAAAA,MAAX,CAAkB,CACrDE,aAAcA,QAAS,CAACC,KAAD,CAAQC,MAAR,CAAgB,CAEnC,IAAIC,OAAS,IAAKC,CAAAA,OAAlB,CACIC,UAAYF,MAAOE,CAAAA,SADvB,CAEIC,GAAK,IAAKC,CAAAA,GAFd,CAGIC,QAAU,IAAKC,CAAAA,QAGfH,GAAJ,GACIE,OAGA,CAHU,IAAKC,CAAAA,QAGf,CAH0BH,EAAGI,CAAAA,KAAH,CAAS,CAAT,CAG1B,CAAA,IAAKH,CAAAA,GAAL,CAAWI,IAAAA,EAJf,CAOEH,GAAAA,CAAAA,OAxB+B,EAA3C,IAAKA,EAAA,CAAQ,CAAR,CAAL,CAAkBjB,OAAA,CAAQiB,EAAA,CAAQ,CAAR,CAAR,CAAlB,IAGCA,EAAA,CAAQ,CAAR,CAHD,CAGcjB,OAAA,CAAQiB,EAAA,CAAQ,CAAR,CAAR,CAHd,CA0BKI;OAAAA,CAAYJ,OAAQE,CAAAA,KAAR,CAAc,CAAd,CACPP,OAAOU,CAAAA,YAAP,CAAoBD,OAApB,CAA+B,CAA/B,CAGA,KAASE,MAAT,CAAa,CAAb,CAAgBA,MAAhB,CAAoBT,SAApB,CAA+BS,MAAA,EAA/B,CACIb,KAAA,CAAMC,MAAN,CAAeY,MAAf,CAAA,EAAqBF,OAAA,CAAUE,MAAV,CAtBU,CADc,CAAlB,CA4BvCxB,WAAWyB,CAAAA,SAAX,CAAuBhB,SAEvB,OAAOT,WAvF6B,CAAZ,EA6F5B,OAAOF,SAASC,CAAAA,IAAKC,CAAAA,UApGM,CAb1B,CADyG;",
"sources":["node_modules/crypto-js/mode-ctr-gladman.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$crypto_js$mode_ctr_gladman\"] = function(global,require,module,exports) {\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n\t * derived from CryptoJS.mode.CTR\n\t * Jan Hruby jhruby.web@gmail.com\n\t */\n\tCryptoJS.mode.CTRGladman = (function () {\n\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\tfunction incWord(word)\n\t\t{\n\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\tvar b1 = (word >> 16)&0xff;\n\t\t\tvar b2 = (word >> 8)&0xff;\n\t\t\tvar b3 = word & 0xff;\n\n\t\t\tif (b1 === 0xff) // overflow b1\n\t\t\t{\n\t\t\tb1 = 0;\n\t\t\tif (b2 === 0xff)\n\t\t\t{\n\t\t\t\tb2 = 0;\n\t\t\t\tif (b3 === 0xff)\n\t\t\t\t{\n\t\t\t\t\tb3 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t++b3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++b2;\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t++b1;\n\t\t\t}\n\n\t\t\tword = 0;\n\t\t\tword += (b1 << 16);\n\t\t\tword += (b2 << 8);\n\t\t\tword += b3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tword += (0x01 << 24);\n\t\t\t}\n\t\t\treturn word;\n\t\t}\n\n\t\tfunction incCounter(counter)\n\t\t{\n\t\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t\t{\n\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\t\tcounter[1] = incWord(counter[1]);\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\n\t\t\t\tincCounter(counter);\n\n\t\t\t\tvar keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTRGladman.Decryptor = Encryptor;\n\n\t    return CTRGladman;\n\t}());\n\n\n\n\n\treturn CryptoJS.mode.CTRGladman;\n\n}));\n};"],
"names":["shadow$provide","global","require","module","exports","root","factory","undef","define","amd","CryptoJS","mode","CTRGladman","incWord","word","b1","b2","b3","lib","BlockCipherMode","extend","Encryptor","processBlock","words","offset","cipher","_cipher","blockSize","iv","_iv","counter","_counter","slice","undefined","keystream","encryptBlock","i","Decryptor"]
}
