["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/crypto-js/mode-ofb.js"],"~:js","shadow$provide.module$node_modules$crypto_js$mode_ofb=function(global,require,module,exports){(function(root,factory,undef){\"object\"===typeof exports?module.exports=exports=factory(require(\"module$node_modules$crypto_js$core\"),require(\"module$node_modules$crypto_js$cipher_core\")):\"function\"===typeof define&&define.amd?define([\"./core\",\"./cipher-core\"],factory):factory(root.CryptoJS)})(this,function(CryptoJS){CryptoJS.mode.OFB=function(){var OFB=CryptoJS.lib.BlockCipherMode.extend(),Encryptor=OFB.Encryptor=\nOFB.extend({processBlock:function(words,offset){var cipher=this._cipher,blockSize=cipher.blockSize,iv=this._iv,keystream=this._keystream;iv&&(keystream=this._keystream=iv.slice(0),this._iv=void 0);cipher.encryptBlock(keystream,0);for(cipher=0;cipher<blockSize;cipher++)words[offset+cipher]^=keystream[cipher]}});OFB.Decryptor=Encryptor;return OFB}();return CryptoJS.mode.OFB})}","~:source","shadow$provide[\"module$node_modules$crypto_js$mode_ofb\"] = function(global,require,module,exports) {\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Output Feedback block mode.\n\t */\n\tCryptoJS.mode.OFB = (function () {\n\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = OFB.Encryptor = OFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var keystream = this._keystream;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                keystream = this._keystream = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    OFB.Decryptor = Encryptor;\n\n\t    return OFB;\n\t}());\n\n\n\treturn CryptoJS.mode.OFB;\n\n}));\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$crypto_js$core","~$shadow.js","~$module$node_modules$crypto_js$cipher_core"]],"~:properties",["^5",["_keystream","processBlock","Encryptor","Decryptor","_iv","OFB"]],"~:compiled-at",1645079148538,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$crypto_js$mode_ofb.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,sCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACjG,SAAS,CAACC,IAAD,CAAOC,OAAP,CAAgBC,KAAhB,CAAuB,CACV,QAAvB,GAAI,MAAOH,QAAX,CAECD,MAAOC,CAAAA,OAFR,CAEkBA,OAFlB,CAE4BE,OAAA,CAAQJ,OAAA,CAAQ,oCAAR,CAAR,CAA2BA,OAAA,CAAQ,2CAAR,CAA3B,CAF5B,CAI2B,UAAtB,GAAI,MAAOM,OAAX,EAAoCA,MAAOC,CAAAA,GAA3C,CAEJD,MAAA,CAAO,CAAC,QAAD,CAAW,eAAX,CAAP,CAAoCF,OAApC,CAFI,CAMJA,OAAA,CAAQD,IAAKK,CAAAA,QAAb,CAXgC,CAAhC,CAAA,CAaA,IAbA,CAaM,QAAS,CAACA,QAAD,CAAW,CAK3BA,QAASC,CAAAA,IAAKC,CAAAA,GAAd,CAAqB,QAAS,EAAG,CAC7B,IAAIA,IAAMF,QAASG,CAAAA,GAAIC,CAAAA,eAAgBC,CAAAA,MAA7B,EAAV,CAEIC,UAAYJ,GAAII,CAAAA,SAAhBA;AAA4BJ,GAAIG,CAAAA,MAAJ,CAAW,CACvCE,aAAcA,QAAS,CAACC,KAAD,CAAQC,MAAR,CAAgB,CAEnC,IAAIC,OAAS,IAAKC,CAAAA,OAAlB,CACIC,UAAYF,MAAOE,CAAAA,SADvB,CAEIC,GAAK,IAAKC,CAAAA,GAFd,CAGIC,UAAY,IAAKC,CAAAA,UAGjBH,GAAJ,GACIE,SAGA,CAHY,IAAKC,CAAAA,UAGjB,CAH8BH,EAAGI,CAAAA,KAAH,CAAS,CAAT,CAG9B,CAAA,IAAKH,CAAAA,GAAL,CAAWI,IAAAA,EAJf,CAMAR,OAAOS,CAAAA,YAAP,CAAoBJ,SAApB,CAA+B,CAA/B,CAGA,KAASK,MAAT,CAAa,CAAb,CAAgBA,MAAhB,CAAoBR,SAApB,CAA+BQ,MAAA,EAA/B,CACIZ,KAAA,CAAMC,MAAN,CAAeW,MAAf,CAAA,EAAqBL,SAAA,CAAUK,MAAV,CAlBU,CADA,CAAX,CAwBhClB,IAAImB,CAAAA,SAAJ,CAAgBf,SAEhB,OAAOJ,IA7BsB,CAAZ,EAiCrB,OAAOF,SAASC,CAAAA,IAAKC,CAAAA,GAtCM,CAb1B,CADiG;\",\n\"sources\":[\"node_modules/crypto-js/mode-ofb.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$crypto_js$mode_ofb\\\"] = function(global,require,module,exports) {\\n;(function (root, factory, undef) {\\n\\tif (typeof exports === \\\"object\\\") {\\n\\t\\t// CommonJS\\n\\t\\tmodule.exports = exports = factory(require(\\\"./core\\\"), require(\\\"./cipher-core\\\"));\\n\\t}\\n\\telse if (typeof define === \\\"function\\\" && define.amd) {\\n\\t\\t// AMD\\n\\t\\tdefine([\\\"./core\\\", \\\"./cipher-core\\\"], factory);\\n\\t}\\n\\telse {\\n\\t\\t// Global (browser)\\n\\t\\tfactory(root.CryptoJS);\\n\\t}\\n}(this, function (CryptoJS) {\\n\\n\\t/**\\n\\t * Output Feedback block mode.\\n\\t */\\n\\tCryptoJS.mode.OFB = (function () {\\n\\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();\\n\\n\\t    var Encryptor = OFB.Encryptor = OFB.extend({\\n\\t        processBlock: function (words, offset) {\\n\\t            // Shortcuts\\n\\t            var cipher = this._cipher\\n\\t            var blockSize = cipher.blockSize;\\n\\t            var iv = this._iv;\\n\\t            var keystream = this._keystream;\\n\\n\\t            // Generate keystream\\n\\t            if (iv) {\\n\\t                keystream = this._keystream = iv.slice(0);\\n\\n\\t                // Remove IV for subsequent blocks\\n\\t                this._iv = undefined;\\n\\t            }\\n\\t            cipher.encryptBlock(keystream, 0);\\n\\n\\t            // Encrypt\\n\\t            for (var i = 0; i < blockSize; i++) {\\n\\t                words[offset + i] ^= keystream[i];\\n\\t            }\\n\\t        }\\n\\t    });\\n\\n\\t    OFB.Decryptor = Encryptor;\\n\\n\\t    return OFB;\\n\\t}());\\n\\n\\n\\treturn CryptoJS.mode.OFB;\\n\\n}));\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"root\",\"factory\",\"undef\",\"define\",\"amd\",\"CryptoJS\",\"mode\",\"OFB\",\"lib\",\"BlockCipherMode\",\"extend\",\"Encryptor\",\"processBlock\",\"words\",\"offset\",\"cipher\",\"_cipher\",\"blockSize\",\"iv\",\"_iv\",\"keystream\",\"_keystream\",\"slice\",\"undefined\",\"encryptBlock\",\"i\",\"Decryptor\"]\n}\n"]