["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/crypto-js/enc-base64url.js"],"~:js","shadow$provide.module$node_modules$crypto_js$enc_base64url=function(global,require,module,exports){(function(root,factory){\"object\"===typeof exports?module.exports=exports=factory(require(\"module$node_modules$crypto_js$core\")):\"function\"===typeof define&&define.amd?define([\"./core\"],factory):factory(root.CryptoJS)})(this,function(CryptoJS){(function(){var WordArray=CryptoJS.lib.WordArray;CryptoJS.enc.Base64url={stringify:function(wordArray,urlSafe=!0){var words=wordArray.words,sigBytes=wordArray.sigBytes;\nurlSafe=urlSafe?this._safe_map:this._map;wordArray.clamp();wordArray=[];for(var i=0;i<sigBytes;i+=3)for(var triplet=(words[i>>>2]>>>24-i%4*8&255)<<16|(words[i+1>>>2]>>>24-(i+1)%4*8&255)<<8|words[i+2>>>2]>>>24-(i+2)%4*8&255,j=0;4>j&&i+.75*j<sigBytes;j++)wordArray.push(urlSafe.charAt(triplet>>>6*(3-j)&63));if(words=urlSafe.charAt(64))for(;wordArray.length%4;)wordArray.push(words);return wordArray.join(\"\")},parse:function(base64Str,urlSafe=!0){var base64StrLength=base64Str.length,map=urlSafe?this._safe_map:\nthis._map;urlSafe=this._reverseMap;if(!urlSafe){urlSafe=this._reverseMap=[];for(var j=0;j<map.length;j++)urlSafe[map.charCodeAt(j)]=j}if(map=map.charAt(64))map=base64Str.indexOf(map),-1!==map&&(base64StrLength=map);map=[];for(var i=j=0;i<base64StrLength;i++)if(i%4){var bits1=urlSafe[base64Str.charCodeAt(i-1)]<<i%4*2,bits2=urlSafe[base64Str.charCodeAt(i)]>>>6-i%4*2;map[j>>>2]|=(bits1|bits2)<<24-j%4*8;j++}return WordArray.create(map,j)},_map:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\x3d\",\n_safe_map:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"}})();return CryptoJS.enc.Base64url})}","~:source","shadow$provide[\"module$node_modules$crypto_js$enc_base64url\"] = function(global,require,module,exports) {\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64url encoding strategy.\n\t     */\n\t    var Base64url = C_enc.Base64url = {\n\t        /**\n\t         * Converts a word array to a Base64url string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @param {boolean} urlSafe Whether to use url safe\n\t         *\n\t         * @return {string} The Base64url string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray, urlSafe=true) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = urlSafe ? this._safe_map : this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64url string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64url string.\n\t         *\n\t         * @param {boolean} urlSafe Whether to use url safe\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);\n\t         */\n\t        parse: function (base64Str, urlSafe=true) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = urlSafe ? this._safe_map : this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                reverseMap = this._reverseMap = [];\n\t                for (var j = 0; j < map.length; j++) {\n\t                    reverseMap[map.charCodeAt(j)] = j;\n\t                }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n\t        _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t        var words = [];\n\t        var nBytes = 0;\n\t        for (var i = 0; i < base64StrLength; i++) {\n\t            if (i % 4) {\n\t                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t                var bitsCombined = bits1 | bits2;\n\t                words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t                nBytes++;\n\t            }\n\t        }\n\t        return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\treturn CryptoJS.enc.Base64url;\n\n}));\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$crypto_js$core","~$shadow.js"]],"~:properties",["^5",["_safe_map","_reverseMap","Base64url","stringify","parse","_map"]],"~:compiled-at",1645079148499,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$crypto_js$enc_base64url.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/crypto-js/enc-base64url.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$crypto_js$enc_base64url\\\"] = function(global,require,module,exports) {\\n;(function (root, factory) {\\n\\tif (typeof exports === \\\"object\\\") {\\n\\t\\t// CommonJS\\n\\t\\tmodule.exports = exports = factory(require(\\\"./core\\\"));\\n\\t}\\n\\telse if (typeof define === \\\"function\\\" && define.amd) {\\n\\t\\t// AMD\\n\\t\\tdefine([\\\"./core\\\"], factory);\\n\\t}\\n\\telse {\\n\\t\\t// Global (browser)\\n\\t\\tfactory(root.CryptoJS);\\n\\t}\\n}(this, function (CryptoJS) {\\n\\n\\t(function () {\\n\\t    // Shortcuts\\n\\t    var C = CryptoJS;\\n\\t    var C_lib = C.lib;\\n\\t    var WordArray = C_lib.WordArray;\\n\\t    var C_enc = C.enc;\\n\\n\\t    /**\\n\\t     * Base64url encoding strategy.\\n\\t     */\\n\\t    var Base64url = C_enc.Base64url = {\\n\\t        /**\\n\\t         * Converts a word array to a Base64url string.\\n\\t         *\\n\\t         * @param {WordArray} wordArray The word array.\\n\\t         *\\n\\t         * @param {boolean} urlSafe Whether to use url safe\\n\\t         *\\n\\t         * @return {string} The Base64url string.\\n\\t         *\\n\\t         * @static\\n\\t         *\\n\\t         * @example\\n\\t         *\\n\\t         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);\\n\\t         */\\n\\t        stringify: function (wordArray, urlSafe=true) {\\n\\t            // Shortcuts\\n\\t            var words = wordArray.words;\\n\\t            var sigBytes = wordArray.sigBytes;\\n\\t            var map = urlSafe ? this._safe_map : this._map;\\n\\n\\t            // Clamp excess bits\\n\\t            wordArray.clamp();\\n\\n\\t            // Convert\\n\\t            var base64Chars = [];\\n\\t            for (var i = 0; i < sigBytes; i += 3) {\\n\\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\\n\\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\\n\\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\\n\\n\\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\\n\\n\\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\\n\\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\\n\\t                }\\n\\t            }\\n\\n\\t            // Add padding\\n\\t            var paddingChar = map.charAt(64);\\n\\t            if (paddingChar) {\\n\\t                while (base64Chars.length % 4) {\\n\\t                    base64Chars.push(paddingChar);\\n\\t                }\\n\\t            }\\n\\n\\t            return base64Chars.join('');\\n\\t        },\\n\\n\\t        /**\\n\\t         * Converts a Base64url string to a word array.\\n\\t         *\\n\\t         * @param {string} base64Str The Base64url string.\\n\\t         *\\n\\t         * @param {boolean} urlSafe Whether to use url safe\\n\\t         *\\n\\t         * @return {WordArray} The word array.\\n\\t         *\\n\\t         * @static\\n\\t         *\\n\\t         * @example\\n\\t         *\\n\\t         *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);\\n\\t         */\\n\\t        parse: function (base64Str, urlSafe=true) {\\n\\t            // Shortcuts\\n\\t            var base64StrLength = base64Str.length;\\n\\t            var map = urlSafe ? this._safe_map : this._map;\\n\\t            var reverseMap = this._reverseMap;\\n\\n\\t            if (!reverseMap) {\\n\\t                reverseMap = this._reverseMap = [];\\n\\t                for (var j = 0; j < map.length; j++) {\\n\\t                    reverseMap[map.charCodeAt(j)] = j;\\n\\t                }\\n\\t            }\\n\\n\\t            // Ignore padding\\n\\t            var paddingChar = map.charAt(64);\\n\\t            if (paddingChar) {\\n\\t                var paddingIndex = base64Str.indexOf(paddingChar);\\n\\t                if (paddingIndex !== -1) {\\n\\t                    base64StrLength = paddingIndex;\\n\\t                }\\n\\t            }\\n\\n\\t            // Convert\\n\\t            return parseLoop(base64Str, base64StrLength, reverseMap);\\n\\n\\t        },\\n\\n\\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\\n\\t        _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\\n\\t    };\\n\\n\\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\\n\\t        var words = [];\\n\\t        var nBytes = 0;\\n\\t        for (var i = 0; i < base64StrLength; i++) {\\n\\t            if (i % 4) {\\n\\t                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\\n\\t                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\\n\\t                var bitsCombined = bits1 | bits2;\\n\\t                words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\\n\\t                nBytes++;\\n\\t            }\\n\\t        }\\n\\t        return WordArray.create(words, nBytes);\\n\\t    }\\n\\t}());\\n\\n\\treturn CryptoJS.enc.Base64url;\\n\\n}));\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"root\",\"factory\",\"define\",\"amd\",\"CryptoJS\",\"WordArray\",\"lib\",\"enc\",\"Base64url\",\"stringify\",\"wordArray\",\"urlSafe\",\"words\",\"sigBytes\",\"map\",\"_safe_map\",\"_map\",\"clamp\",\"base64Chars\",\"i\",\"triplet\",\"j\",\"push\",\"charAt\",\"paddingChar\",\"length\",\"join\",\"parse\",\"base64Str\",\"base64StrLength\",\"reverseMap\",\"_reverseMap\",\"charCodeAt\",\"paddingIndex\",\"indexOf\",\"nBytes\",\"bits1\",\"bits2\",\"create\"]\n}\n"]